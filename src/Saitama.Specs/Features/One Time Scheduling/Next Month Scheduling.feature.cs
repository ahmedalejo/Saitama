// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Saitama.Specs.Features.OneTimeScheduling
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "Owner:adebunky@gmail.com")]
    public partial class NextMonthSchedulingFeature : Xunit.IClassFixture<NextMonthSchedulingFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Next Month Scheduling.feature"
#line hidden
        
        public NextMonthSchedulingFeature(NextMonthSchedulingFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Next Month Scheduling", "     As a automation enthusiast\r\n     I would like to be able to run tasks only o" +
                    "nce\r\n     So that i can assure the consistency of certain initialization task", ProgrammingLanguage.CSharp, new string[] {
                        "Owner:adebunky@gmail.com"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Schedule a job to run next month on specific day")]
        [Xunit.TraitAttribute("FeatureTitle", "Next Month Scheduling")]
        [Xunit.TraitAttribute("Description", "Schedule a job to run next month on specific day")]
        [Xunit.InlineDataAttribute("2019-01-01T00:00:00.0+00:00", "1", "1.00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019-01-01T00:00:00.0+00:00", "2", "2.00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019-01-01T00:00:00.0+00:00", "3", "3.00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019-01-01T00:00:00.0+00:00", "4", "4.00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019-01-01T00:00:00.0+00:00", "5", "5.00:00:00", new string[0])]
        public virtual void ScheduleAJobToRunNextMonthOnSpecificDay(string current_Date_And_Time, string number, string time_To_Execution, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schedule a job to run next month on specific day", null, exampleTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
    testRunner.Given(string.Format("the current time is \'{0}\'", current_Date_And_Time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
      testRunner.And(string.Format("a job is configured to run on day {0} next month", number), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
     testRunner.When("scheduled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
     testRunner.Then(string.Format("the time to execution should be \"{0}\"", time_To_Execution), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Schedule a job to run next month")]
        [Xunit.TraitAttribute("FeatureTitle", "Next Month Scheduling")]
        [Xunit.TraitAttribute("Description", "Schedule a job to run next month")]
        public virtual void ScheduleAJobToRunNextMonth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schedule a job to run next month", null, ((string[])(null)));
#line 21
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 22
    testRunner.Given("a job is configured to run next month", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
     testRunner.When("scheduled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
     testRunner.Then("it should run once on the immediate 1st day of the following month", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Schedule a job to run next month [outline]")]
        [Xunit.TraitAttribute("FeatureTitle", "Next Month Scheduling")]
        [Xunit.TraitAttribute("Description", "Schedule a job to run next month [outline]")]
        [Xunit.InlineDataAttribute("2019", "January", "2019-02-01T00:00:00.0+00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019", "February", "2019-03-01T00:00:00.0+00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019", "March", "2019-04-01T00:00:00.0+00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019", "April", "2019-05-01T00:00:00.0+00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019", "May", "2019-06-01T00:00:00.0+00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019", "June", "2019-07-01T00:00:00.0+00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019", "July", "2019-08-01T00:00:00.0+00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019", "August", "2019-09-01T00:00:00.0+00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019", "September", "2019-10-01T00:00:00.0+00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019", "October", "2019-11-01T00:00:00.0+00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019", "November", "2019-12-01T00:00:00.0+00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019", "December", "2020-01-01T00:00:00.0+00:00", new string[0])]
        public virtual void ScheduleAJobToRunNextMonthOutline(string year, string month, string date_And_Time_Of_Execution, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schedule a job to run next month [outline]", null, exampleTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 27
    testRunner.Given(string.Format("it is any day of \"{0}\", {1}", month, year), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
      testRunner.And("a job is configured to run next month", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
     testRunner.When("scheduled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
     testRunner.Then("it should run once on the immediate 1st day of the following month", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
     testRunner.And(string.Format("the approximate time of execution should be \"{0}\"", date_And_Time_Of_Execution), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Schedule a job to run next month on a specific day")]
        [Xunit.TraitAttribute("FeatureTitle", "Next Month Scheduling")]
        [Xunit.TraitAttribute("Description", "Schedule a job to run next month on a specific day")]
        [Xunit.InlineDataAttribute("2019-01-01T00:00:00.0+00:00", "1", "1.00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019-01-01T01:00:00.0+00:00", "2", "2.01:00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019-01-01T02:00:00.0+00:00", "3", "3.02:00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019-01-01T03:00:00.0+00:00", "4", "4.03:00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019-01-01T04:00:00.0+00:00", "5", "5.04:00:00", new string[0])]
        public virtual void ScheduleAJobToRunNextMonthOnASpecificDay(string current_Date_And_Time, string day, string time_To_Execution, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schedule a job to run next month on a specific day", null, exampleTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 49
    testRunner.Given(string.Format("the current time is \"{0}\"", current_Date_And_Time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
      testRunner.And(string.Format("a job is configured to run on day {0} next month", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
     testRunner.When("scheduled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
     testRunner.Then(string.Format("the time to execution should be \"{0}\"", time_To_Execution), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                NextMonthSchedulingFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                NextMonthSchedulingFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
