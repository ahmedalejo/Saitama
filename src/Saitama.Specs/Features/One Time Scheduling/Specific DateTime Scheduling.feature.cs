// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Saitama.Specs.Features.OneTimeScheduling
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "Owner:adebunky@gmail.com")]
    public partial class SpecificDateTimeSchedulingFeature : Xunit.IClassFixture<SpecificDateTimeSchedulingFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Specific DateTime Scheduling.feature"
#line hidden
        
        public SpecificDateTimeSchedulingFeature(SpecificDateTimeSchedulingFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Specific Date Time Scheduling", @"     As a automation enthusiast
     I would like to be able to run tasks once on specific moments
     So that i am able run tasks like user feedback request after a month of registration,
     trial period complete notifications, Anniversary notifications, e-mail dispatch e.t.c", ProgrammingLanguage.CSharp, new string[] {
                        "Owner:adebunky@gmail.com"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Schedule a job to run on a specific date and time")]
        [Xunit.TraitAttribute("FeatureTitle", "Specific Date Time Scheduling")]
        [Xunit.TraitAttribute("Description", "Schedule a job to run on a specific date and time")]
        [Xunit.InlineDataAttribute("2019-01-01T00:00:00.0+00:00", "2020-01-01T00:00:00.0+00:00", "365.00:00:00", "a year", new string[0])]
        [Xunit.InlineDataAttribute("2020-01-01T00:00:00.0+00:00", "2021-01-01T00:00:00.0+00:00", "366.00:00:00", "a leap year", new string[0])]
        [Xunit.InlineDataAttribute("2019-01-01T00:00:00.0+00:00", "2019-01-01T00:00:00.0+00:00", "1.00:00:00", "a day", new string[0])]
        [Xunit.InlineDataAttribute("2019-01-01T00:00:00.0+00:00", "2019-02-01T00:00:00.0+00:00", "31.00:00:00", "a 31 day month", new string[0])]
        [Xunit.InlineDataAttribute("2019-01-01T00:00:00.0+00:00", "2019-02-01T01:00:00.0+00:00", "31.01:00:00", "a 31 day month", new string[0])]
        [Xunit.InlineDataAttribute("2019-02-01T00:00:00.0+00:00", "2019-02-28T00:00:00.0+00:00", "27.00:00:00", "february", new string[0])]
        [Xunit.InlineDataAttribute("2020-02-01T00:00:00.0+00:00", "2020-02-29T00:00:00.0+00:00", "28.00:00:00", "leap year february", new string[0])]
        public virtual void ScheduleAJobToRunOnASpecificDateAndTime(string current_Date_And_Time, string schedule, string time_To_Execution, string info, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schedule a job to run on a specific date and time", null, exampleTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
    testRunner.Given(string.Format("the current date and time are {0}", current_Date_And_Time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
      testRunner.And(string.Format("a job is configured to run on \"{0}\"", schedule), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
     testRunner.When("scheduled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
     testRunner.Then(string.Format("it should run once after \"{0}\"", time_To_Execution), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Schedule a job to run next week on specific weekday")]
        [Xunit.TraitAttribute("FeatureTitle", "Specific Date Time Scheduling")]
        [Xunit.TraitAttribute("Description", "Schedule a job to run next week on specific weekday")]
        [Xunit.InlineDataAttribute("2019-01-01T00:00:00.0+00:00", "Monday", "6.00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019-01-01T00:00:00.0+00:00", "Tuesday", "7.00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019-01-01T00:00:00.0+00:00", "Wednesday", "8.00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019-01-01T00:00:00.0+00:00", "Thursday", "9.00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019-01-01T00:00:00.0+00:00", "Friday", "10.00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019-01-01T00:00:00.0+00:00", "Saturday", "11.00:00:00", new string[0])]
        [Xunit.InlineDataAttribute("2019-01-01T00:00:00.0+00:00", "Sunday", "12.00:00:00", new string[0])]
        public virtual void ScheduleAJobToRunNextWeekOnSpecificWeekday(string current_Date_And_Time, string day_Of_Week, string time_To_Execution, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schedule a job to run next week on specific weekday", null, exampleTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 26
    testRunner.Given(string.Format("the current date and time are \"{0}\"", current_Date_And_Time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
      testRunner.And(string.Format("a job is configured to run next week {0}", day_Of_Week), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
     testRunner.When("scheduled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
     testRunner.Then(string.Format("it should run once after \"{0}\"", time_To_Execution), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SpecificDateTimeSchedulingFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SpecificDateTimeSchedulingFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
